A described in the section on [cache servers|guide:3. Cache Servers], you can setup Gemfire in client / server mode, however to do so with GORM entities the server needs to know about the regions and also needs to have all the necessary classes on the classpath.

The Gemfire plugin for Grails will handle both of these cases for you. First to setup an appropriate server configuration you should run in the @gemfire-generate@ command:

{code}
$ grails gemfire-generate
{code}

This will create a @target/cache.xml@ file with regions that match the GORM entities you have created.

With this done you can start a cache server with the @start-cache-server@ command:

{code}
$ grails start-cache-server server1 --port=4111
{code}

The @start-cache-server@ command will check for the existence of a @grails-app/conf/cache.xml@ or the generated @target/cache.xml@ file. This allows you to make customizations to the generated file if necessary.

The @start-cache-server@ command will also make sure that the classes in your Grails application are visible on the cache server. Once you have the cache server up and running you need to configure your Grails application to use the server by adding the following to @grails-app/conf/Config.groovy@:

{code}
// grails-app/conf/Config.groovy
grails.gemfire.servers = {    
	myServer {
		properties = ['log-level': 'warning']
		pool {
			addServer "localhost", 4111
			setMinConnections 1
			setMaxConnections 20
			setRetryAttempts 10
			setSubscriptionEnabled true
		}
	}
}
{code}